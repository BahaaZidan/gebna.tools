/* eslint-disable */
/**
 * This file was generated by 'vite-plugin-kit-routes'
 *
 *      >> DO NOT EDIT THIS FILE MANUALLY <<
 */

/**
 * PAGES
 */
const PAGES = {
  "/": `/`,
  "/console": `/console`,
  "/console/[website_id]": (params: { website_id: (string | number) }) => {
    return `/console/${params['website_id']}`
  },
  "/console/[website_id]/comments": (params: { website_id: (string | number) }) => {
    return `/console/${params['website_id']}/comments`
  },
  "/console/[website_id]/install": (params: { website_id: (string | number) }) => {
    return `/console/${params['website_id']}/install`
  },
  "/console/[website_id]/newsletter": (params: { website_id: (string | number) }) => {
    return `/console/${params['website_id']}/newsletter`
  },
  "/console/[website_id]/pages": (params: { website_id: (string | number) }) => {
    return `/console/${params['website_id']}/pages`
  },
  "/console/[website_id]/pages/[page_id]/edit": (params: { website_id: (string | number), page_id: (string | number) }) => {
    return `/console/${params['website_id']}/pages/${params['page_id']}/edit`
  },
  "/console/[website_id]/settings": (params: { website_id: (string | number) }) => {
    return `/console/${params['website_id']}/settings`
  },
  "/console/[website_id]/users": (params: { website_id: (string | number) }) => {
    return `/console/${params['website_id']}/users`
  },
  "/console/billing": `/console/billing`,
  "/embeds/[website_id]/[page_slug]/comments": (params: { website_id: (string | number), page_slug: (string | number) }) => {
    return `/embeds/${params['website_id']}/${params['page_slug']}/comments`
  },
  "/embeds/[website_id]/newsletter": (params: { website_id: (string | number) }) => {
    return `/embeds/${params['website_id']}/newsletter`
  },
  "/embeds/login": `/embeds/login`
}

/**
 * SERVERS
 */
const SERVERS = {
  "GET /api/[website_id]/[page_id]/comments": (params: { website_id: (string | number), page_id: (string | number) }) => {
    return `/api/${params['website_id']}/${params['page_id']}/comments`
  },
  "POST /api/[website_id]/[page_id]/comments": (params: { website_id: (string | number), page_id: (string | number) }) => {
    return `/api/${params['website_id']}/${params['page_id']}/comments`
  },
  "GET /api/[website_id]/comments": (params: { website_id: (string | number) }) => {
    return `/api/${params['website_id']}/comments`
  },
  "PUT /api/comments/[comment_id]": (params: { comment_id: (string | number) }) => {
    return `/api/comments/${params['comment_id']}`
  },
  "DELETE /api/comments/[comment_id]": (params: { comment_id: (string | number) }) => {
    return `/api/comments/${params['comment_id']}`
  },
  "PATCH /api/comments/[comment_id]": (params: { comment_id: (string | number) }) => {
    return `/api/comments/${params['comment_id']}`
  },
  "GET /api/graphql": `/api/graphql`,
  "POST /api/graphql": `/api/graphql`,
  "OPTIONS /api/graphql": `/api/graphql`
}

/**
 * ACTIONS
 */
const ACTIONS = {
  "default /console": `/console`,
  "default /console/[website_id]/pages/[page_id]/edit": (params: { website_id: (string | number), page_id: (string | number) }) => {
    return `/console/${params['website_id']}/pages/${params['page_id']}/edit`
  },
  "default /console/[website_id]/settings": (params: { website_id: (string | number) }) => {
    return `/console/${params['website_id']}/settings`
  }
}

/**
 * LINKS
 */
const LINKS = {
  
}

type ParamValue = string | number | undefined

/**
 * Append search params to a string
 */
export const appendSp = (
  sp?: Record<string, ParamValue | ParamValue[]>,
  prefix: '?' | '&' = '?',
) => {
  if (sp === undefined) return ''

  const params = new URLSearchParams()
  const append = (n: string, v: ParamValue) => {
    if (v !== undefined) {
      params.append(n, String(v))
    }
  }

  let anchor = ''
  for (const [name, val] of Object.entries(sp)) {
    if (name === '__KIT_ROUTES_ANCHOR__' && val !== undefined) {
      anchor = `#${val}`
      continue
    }
    if (Array.isArray(val)) {
      for (const v of val) {
        append(name, v)
      }
    } else {
      append(name, val)
    }
  }

  const formatted = params.toString()
  if (formatted || anchor) {
    return `${prefix}${formatted}${anchor}`.replace('?#', '#')
  }
  return ''
}

/**
 * get the current search params
 * 
 * Could be use like this:
 * ```
 * route("/cities", { page: 2 }, { ...currentSP() })
 * ```
 */ 
export const currentSp = () => {
  const params = new URLSearchParams(window.location.search)
  const record: Record<string, string> = {}
  for (const [key, value] of params.entries()) {
    record[key] = value
  }
  return record
}

/* type helpers for route function */
type NonFunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? never : K }[keyof T]
type FunctionKeys<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T]
type FunctionParams<T> = T extends (...args: infer P) => any ? P : never

const AllObjs = { ...PAGES, ...ACTIONS, ...SERVERS, ...LINKS }
type AllTypes = typeof AllObjs

export type Routes = keyof AllTypes extends `${string}/${infer Route}` ? `/${Route}` : keyof AllTypes
export const routes = [
	...new Set(Object.keys(AllObjs).map((route) => /^\/.*|[^ ]?\/.*$/.exec(route)?.[0] ?? route)),
] as Routes[]

/**
 * To be used like this: 
 * ```ts
 * import { route } from './ROUTES'
 * 
 * route('site_id', { id: 1 })
 * ```
 */
export function route<T extends FunctionKeys<AllTypes>>(key: T, ...params: FunctionParams<AllTypes[T]>): string
export function route<T extends NonFunctionKeys<AllTypes>>(key: T): string
export function route<T extends keyof AllTypes>(key: T, ...params: any[]): string {
  if (AllObjs[key] as any instanceof Function) {
    const element = (AllObjs as any)[key] as (...args: any[]) => string
    return element(...params)
  } else {
    return AllObjs[key] as string
  }
}

/**
* Add this type as a generic of the vite plugin `kitRoutes<KIT_ROUTES>`.
*
* Full example:
* ```ts
* import type { KIT_ROUTES } from '$lib/ROUTES'
* import { kitRoutes } from 'vite-plugin-kit-routes'
*
* kitRoutes<KIT_ROUTES>({
*  PAGES: {
*    // here, key of object will be typed!
*  }
* })
* ```
*/
export type KIT_ROUTES = {
  PAGES: { '/': never, '/console': never, '/console/[website_id]': 'website_id', '/console/[website_id]/comments': 'website_id', '/console/[website_id]/install': 'website_id', '/console/[website_id]/newsletter': 'website_id', '/console/[website_id]/pages': 'website_id', '/console/[website_id]/pages/[page_id]/edit': 'website_id' | 'page_id', '/console/[website_id]/settings': 'website_id', '/console/[website_id]/users': 'website_id', '/console/billing': never, '/embeds/[website_id]/[page_slug]/comments': 'website_id' | 'page_slug', '/embeds/[website_id]/newsletter': 'website_id', '/embeds/login': never }
  SERVERS: { 'GET /api/[website_id]/[page_id]/comments': 'website_id' | 'page_id', 'POST /api/[website_id]/[page_id]/comments': 'website_id' | 'page_id', 'GET /api/[website_id]/comments': 'website_id', 'PUT /api/comments/[comment_id]': 'comment_id', 'DELETE /api/comments/[comment_id]': 'comment_id', 'PATCH /api/comments/[comment_id]': 'comment_id', 'GET /api/graphql': never, 'POST /api/graphql': never, 'OPTIONS /api/graphql': never }
  ACTIONS: { 'default /console': never, 'default /console/[website_id]/pages/[page_id]/edit': 'website_id' | 'page_id', 'default /console/[website_id]/settings': 'website_id' }
  LINKS: Record<string, never>
  Params: { 'website_id': never, 'page_id': never, 'page_slug': never, 'comment_id': never }
}

type Query {
	node(id: ID!): Node
	viewer: User
}

type Mutation {
	createComment(input: CreateCommentInput!): Comment!
	deleteComment(input: DeleteCommentInput!): Comment
	updateCommentContent(input: UpdateCommentContentInput!): Comment
	publishComment(input: PublishCommentInput!): Comment
	togglePagePreModeration(id: ID!): Page
	togglePageClosed(id: ID!): Page
	createWebsite(input: CreateWebsiteInput!): Website!
	updateWebsite(input: UpdateWebsiteInput!): Website
}

input UpdateWebsiteInput {
	id: ID!
	name: String
	domains: [String!]
	preModeration: Boolean
}

input CreateWebsiteInput {
	name: String!
	domains: [String!]!
}

input CreateCommentInput {
	pageId: ID!
	content: String!
}

input DeleteCommentInput {
	commentId: ID!
}

input UpdateCommentContentInput {
	commentId: ID!
	content: String!
}

input PublishCommentInput {
	commentId: ID!
}

type Website implements Node {
	id: ID!
	name: String!
	owner: User!
	preModeration: Boolean!
	domains: [String!]!
	page(input: PageInput!): Page
	embedSettings: WebsiteEmbedSettings!
}

enum WebsiteEmbedTheme {
	dark
	light
}
enum WebsiteEmbedDirection {
	rtl
	ltr
}
enum WebsiteEmbedLanguage {
	ar
	en
}

type WebsiteEmbedSettings {
	theme: WebsiteEmbedTheme!
	dir: WebsiteEmbedDirection!
	lang: WebsiteEmbedLanguage!
}

input PageInput {
	slug: String!
	overrides: PageOverrides
}

input PageOverrides {
	name: String!
	url: URL!
}

type Page implements Node {
	id: ID!
	slug: String!
	website: Website!
	name: String
	url: URL
	preModeration: Boolean!
	closed: Boolean!
	comments(first: Int, after: String): CommentsConnection!
	permissions: PageViewerPermissions!
}

type PageViewerPermissions {
	createComment: Boolean!
	toggleClosed: Boolean!
	togglePreModeration: Boolean!
}

type CommentsConnection implements Connection {
	pageInfo: PageInfo!
	edges: [CommentEdge!]!
}

type CommentEdge implements Edge {
	cursor: String
	node: Comment!
}

type Comment implements Node {
	id: ID!
	content: String!
	createdAt: DateTime!
	updatedAt: DateTime!
	published: Boolean!
	page: Page!
	website: Website!
	author: User!
	permissions: CommentViewerPermissions!
}

type CommentViewerPermissions {
	delete: Boolean!
	edit: Boolean!
	approve: Boolean!
}

type User implements Node {
	id: ID!
	name: String!
	email: String!
	image: String
	websites: [Website!]!
}

type PageInfo {
	startCursor: String
	endCursor: String
	hasNextPage: Boolean
	hasPreviousPage: Boolean
}

interface Connection {
	pageInfo: PageInfo!
	edges: [Edge!]!
}

interface Node {
	id: ID!
}

interface Edge {
	cursor: String
	node: Node!
}

scalar DateTime
scalar URL

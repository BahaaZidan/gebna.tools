type Query {
	node(id: ID!): Node
}

type Mutation {
	createComment(input: CreateCommentInput!): Comment!
	deleteComment(input: DeleteCommentInput!): Comment
	updateCommentContent(input: UpdateCommentContentInput!): Comment
	publishComment(input: PublishCommentInput!): Comment
	togglePagePreModeration(id: ID!): Page
	togglePageClosed(id: ID!): Page
}

input CreateCommentInput {
	pageId: ID!
	content: String!
}

input DeleteCommentInput {
	commentId: ID!
}

input UpdateCommentContentInput {
	commentId: ID!
	content: String!
}

input PublishCommentInput {
	commentId: ID!
}

type Website implements Node {
	id: ID!
	name: String!
	owner: User!
	preModeration: Boolean!
	domains: [String!]!
	page(input: PageInput!): Page
}

input PageInput {
	slug: String!
	overrides: PageOverrides
}

input PageOverrides {
	name: String!
	url: URL!
}

type Page implements Node {
	id: ID!
	slug: String!
	website: Website!
	name: String
	url: URL
	preModeration: Boolean!
	closed: Boolean!
	comments(first: Int, after: String): CommentsConnection!
}

type CommentsConnection implements Connection {
	pageInfo: PageInfo!
	edges: [CommentEdge!]!
}

type CommentEdge implements Edge {
	cursor: String
	node: Comment!
}

type Comment implements Node {
	id: ID!
	content: String!
	createdAt: DateTime!
	updatedAt: DateTime!
	published: Boolean!
	page: Page!
	website: Website!
	author: User!
}

type User implements Node {
	id: ID!
	name: String!
	email: String!
	image: String
}

type PageInfo {
	startCursor: String
	endCursor: String
	hasNextPage: Boolean
	hasPreviousPage: Boolean
}

interface Connection {
	pageInfo: PageInfo!
	edges: [Edge!]!
}

interface Node {
	id: ID!
}

interface Edge {
	cursor: String
	node: Node!
}

scalar DateTime
scalar URL
